/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Customer;

import Business.Business.EcoSystem;
import Business.Customer.Customer;
import Business.Customer.Order;
import Business.DB4OUtil.DB4OUtil;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Item;
import Business.Enterprise.Store;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Status;
import java.awt.CardLayout;
import java.util.Date;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tzm
 */
public class OrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderJPanel
     */
    private UserAccount account;
    private Enterprise enterprise;
    private JPanel userProcessContainer;
    private Customer customer;
    private Order order;
    private Store store;
    private EcoSystem system;

    public OrderJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount account, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system=system;
        this.enterprise = enterprise;
        this.store = (Store) enterprise;
        this.order = new Order();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        backJButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemListTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        AddJButton1 = new javax.swing.JButton();
        TotalPrice = new javax.swing.JLabel();
        totalPriceJTextField = new javax.swing.JTextField();
        deleteJButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        checkoutButton = new javax.swing.JButton();

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "UnitPrice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(menuTable);

        backJButton1.setFont(new java.awt.Font("宋体", 0, 10)); // NOI18N
        backJButton1.setText(" Back");
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });

        itemListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Item", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemListTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(itemListTable);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel3.setText("Item List: ");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        AddJButton1.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        AddJButton1.setText("Add Item");
        AddJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddJButton1ActionPerformed(evt);
            }
        });

        TotalPrice.setFont(new java.awt.Font("宋体", 1, 12)); // NOI18N
        TotalPrice.setText("TotalPrice:");

        totalPriceJTextField.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N

        deleteJButton.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TotalPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalPriceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddJButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backJButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddJButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TotalPrice)
                    .addComponent(totalPriceJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteJButton)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(checkoutButton))
                .addContainerGap(91, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed

    private void itemListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemListTableMouseClicked

    }//GEN-LAST:event_itemListTableMouseClicked
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) menuTable.getModel();

        model.setRowCount(0);

        for (Item item : store.getItemDirectory().getItemDirectory()) {
            Object[] row = new Object[2];
            row[0] = item;
            row[1] = item.getUnitPrice();
            model.addRow(row);
        }

    }
    private void AddJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddJButton1ActionPerformed

        int selectedRowIndex = menuTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Item item = (Item) menuTable.getValueAt(selectedRowIndex, 0);
        int quantity = (int) quantitySpinner.getValue();
        order.getOrderItem().put(item, quantity);
        populateItemListTable();
        totalPriceJTextField.setText(String.valueOf(order.calculatePrice()));

        // TODO add your handling code here:
    }//GEN-LAST:event_AddJButton1ActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        int selectedRowIndex = itemListTable.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Item item = (Item) itemListTable.getValueAt(selectedRowIndex, 0);
        order.getOrderItem().remove(item);
        populateItemListTable();
        totalPriceJTextField.setText(String.valueOf(order.calculatePrice()));
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        int choice = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear all the items in the item list?",
                "Clear Item List", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) {
            order.getOrderItem().clear();
            populateItemListTable();
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutButtonActionPerformed
        if (order.getOrderItem().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select some items first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        order.setSender(account);
        order.setRequestDate(new Date());
        order.setEnterprise(enterprise);
        order.setStatus(Status.Waiting);
        account.getWorkQueue().getWorkRequestList().add(order);
        enterprise.getWorkQueue().getWorkRequestList().add(order);
        JOptionPane.showMessageDialog(this, "The order has been sent, please wait for the store's response!", "Information", JOptionPane.DEFAULT_OPTION);
         DB4OUtil.getInstance().storeSystem(system);
    }//GEN-LAST:event_checkoutButtonActionPerformed
    private void populateItemListTable() {
        DefaultTableModel model = (DefaultTableModel) itemListTable.getModel();
        model.setRowCount(0);
        for (Map.Entry<Item, Integer> o : order.getOrderItem().entrySet()) {
            Object[] row = new Object[3];
            row[0] = o.getKey();
            row[1] = o.getValue();
            row[2] = o.getKey().getUnitPrice() * o.getValue();
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddJButton1;
    private javax.swing.JLabel TotalPrice;
    private javax.swing.JButton backJButton1;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JTable itemListTable;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable menuTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField totalPriceJTextField;
    // End of variables declaration//GEN-END:variables
}
